/**
 * Vodafone Reboot Framework: Version 13.0.2. Generation Date: 2019-09-27T12:29:21.253Z
 */

.vfes-ms-content .vfms-banner {
  background-image: url('../img/bg-mobile.jpg?v=e846d65505fd7c3312df868a42176aff');
  background-size: cover;
  text-align: center;
  padding: 1.4375rem 1rem;
}

.vfes-ms-content .vfms-banner-text {
  padding: 11.25rem 0 0 0;
  font-size: 1rem;
  line-height: 1.375rem;
  margin: 0;
}

.vfes-ms-content .vfms-banner-corner {
  display: none;
}

.vfes-ms-content .vfms-banner__channels {
  text-align: center;
  padding: 0.5rem 0;
}

.vfes-ms-content .vfms-banner .vfms-tv-channels {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  margin-bottom: 0.3125rem;
}

.vfes-ms-content .vfms-banner .vfms-tv-channels__item img {
  height: 2.5rem;
  width: auto;
}

.vfes-ms-content .vfms-banner .vfes-button {
  margin-top: 1.25rem;
  display: block;
}

.vfes-ms-content .vfes-title {
  font-size: 1.375rem;
  line-height: 1.875rem;
  margin-top: 0.625rem;
}

.vfes-ms-content .vfes-title,
.vfes-ms-content .vfms-banner-text {
  color: #fff;
  text-align: center;
}

@media screen and (min-width: 40rem) {
  .vfes-ms-content .vfms-banner {
    text-align: left;
    background-image: url('../img/bg-tablet.jpg?v=9284b890f52daaa84a229dd105729645');
    background-size: cover;
    background-position-x: 84%;
    padding-bottom: 1rem;
  }
  .vfes-ms-content .vfms-banner__content {
    position: relative;
  }
  .vfes-ms-content .vfms-banner__channels {
    padding-top: 0;
    padding-bottom: 1.25rem;
    text-align: left;
  }
  .vfes-ms-content .vfms-banner-corner {
    display: block;
    position: absolute;
    right: 5rem;
    top: 29.375rem;
  }
  .vfes-ms-content .vfms-banner .vfes-title {
    text-align: left;
    font-size: 2.0625rem;
    line-height: 2.5rem;
    max-width: 45.4375rem;
    margin-top: 1.8125rem;
  }
  .vfes-ms-content .vfms-banner .vfes-paragraph {
    font-size: 1.125rem;
    line-height: 1.5rem;
    text-align: left;
    padding: 1.125rem 0 0.6875rem 0;
  }
}

@media screen and (min-width: 60.625rem) {
  .vfes-ms-content .vfms-banner {
    background-image: url('../img/bg-desktop.jpg?v=4af9102b7d1fb268613801ddc34d7bc0');
    background-position-x: 100%;
  }
  .vfes-ms-content .vfms-banner .vfes-title {
    max-width: 48.75rem;
  }
  .vfes-ms-content .vfms-banner-corner {
    right: 8.125rem;
    top: 28.75rem;
  }
  .vfes-ms-content .vfms-banner-corner img {
    width: 5rem;
  }
  .vfes-ms-content .vfms-banner .vfes-title {
    text-align: left;
    font-size: 2.5rem;
    line-height: 3rem;
    max-width: 52.9375rem;
    margin-top: 1.8125rem;
  }
  .vfes-ms-content .vfms-banner .vfms-tv-channels__item {
    margin-top: 0.3125rem;
  }
  .vfes-ms-content .vfms-banner .vfms-tv-channels__item img {
    width: auto;
    height: 2.5rem;
  }
}

.vfes-modal-channel {
  background-color: rgba(0, 0, 0, 0.7);
}

.vfes-modal-channel .vfes-modal__head {
  padding-top: 0.875rem;
}

.vfes-modal-channel .vfes-modal__close {
  padding-top: 0.875rem;
}

.vfes-modal-channel .vfes-modal__item {
  margin-top: 3.75rem;
}

.vfes-modal-channel .vfes-modal__content {
  margin-top: -0.125rem;
  overflow: overlay;
  height: 100%;
}

.vfes-modal-channel .vfes-modal__content .vfes-title {
  text-align: center;
  font-size: 1.75rem;
  line-height: 2.25rem;
}

.vfes-modal-channel .vfes-modal__content .vfes-title--5 {
  font-size: 1.125rem;
  text-align: center;
}

.vfes-modal-channel .vfes-modal__content .vfes-list {
  display: flex;
  flex-flow: row wrap;
  justify-content: flex-start;
  padding: 0 0.625rem 0 0.625rem;
}

.vfes-modal-channel .vfes-modal__content .channels__channel {
  display: inline-block;
  text-align: center;
  vertical-align: top;
  width: 4.25rem;
}

.vfes-modal-channel .vfes-modal__content .channels__channel .img {
  width: 4.25rem;
}

.vfes-modal-channel .vfes-modal__content .channels__channel .vfes-paragraph {
  text-align: center;
}

.vfes-modal-channel .vfes-modal__content .channels__channel:last-of-type .vfes-paragraph {
  margin-bottom: 2.5rem;
}

.vfes-modal-channel .vfes-modal__content .channels__common .channels__channel:last-of-type .vfes-paragraph {
  margin-bottom: 0rem;
}

@media screen and (min-width: 40rem) {
  .vfes-modal-channel {
    align-items: center;
  }
  .vfes-modal-channel .vfes-modal__item {
    width: 37.5rem;
    margin-top: 0;
  }
  .vfes-modal-channel .vfes-modal__content {
    padding: 0 2.375rem 2.5rem 2.375rem;
    height: auto;
  }
  .vfes-modal-channel .vfes-modal__content .vfes-title {
    font-size: 2.25rem;
    line-height: 2.5rem;
  }
  .vfes-modal-channel .vfes-modal__content .vfes-title--5 {
    font-size: 1.25rem;
  }
  .vfes-modal-channel .vfes-modal__content .vfes-list {
    display: inline-block;
  }
  .vfes-modal-channel .vfes-modal__content .list-cinefans,
  .vfes-modal-channel .vfes-modal__content .list-peques {
    display: flex;
    justify-content: space-between;
  }
  .vfes-modal-channel .vfes-modal__content .channels__channel {
    width: 5rem;
  }
  .vfes-modal-channel .vfes-modal__content .channels__channel .img {
    width: 5rem;
  }
  .vfes-modal-channel .vfes-modal__content .channels__channel .vfes-paragraph {
    font-size: 0.875rem;
    line-height: 1.125rem;
  }
  .vfes-modal-channel .vfes-modal__content .channels__channel:last-of-type .vfes-paragraph {
    margin-bottom: 2.5rem;
  }
}

@media screen and (min-width: 60.625rem) {
  .vfes-modal-channel .vfes-modal__item {
    width: 48.75rem;
  }
  .vfes-modal-channel .vfes-modal__content {
    padding: 0 0 2.5rem 0;
  }
  .vfes-modal-channel .vfes-modal__content .vfes-title {
    font-size: 2.5rem;
    line-height: 3rem;
  }
  .vfes-modal-channel .vfes-modal__content .vfes-list {
    padding-left: 6.25rem;
    padding-right: 6.25rem;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
