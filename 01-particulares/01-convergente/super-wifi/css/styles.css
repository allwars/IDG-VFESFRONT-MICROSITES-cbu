/**
 * Vodafone Reboot Framework: Version 2.12.0. Generation Date: 2021-02-22T08:59:18.680Z
 */

.vfes-ms-content .vf-img {
  max-width: 100%;
}

.vfes-ms-content .vf-block {
  display: block;
}

.vfes-ms-content .vf-header {
  background-image:  url('../img/header/cabecera-mobile.jpg?v=3f5fb24c1b9249e244c2b18ecd933f7b');
  background-size: cover;
}

@media screen and (min-width: 47.75rem) {
  .vfes-ms-content .vf-header {
    background-image:  url('../img/header/cabecera-tablet.jpg?v=0c59a48d67211e792aa82df13d384a3b');
  }
}

@media screen and (min-width: 60.625rem) {
  .vfes-ms-content .vf-header {
    background-image:  url('../img/header/cabecera-desktop.jpg?v=6df3d85a2b67a8a9d4dc4af4531cc800');
  }
}

@media screen and (min-width: 40rem) {
  .vfes-ms-content .vf-flex {
    display: flex;
    flex-direction: row;
  }
}

@media screen and (min-width: 40rem) {
  .vfes-ms-content .vf-flex--item:nth-of-type(1) {
    order: 2;
  }
}

@media screen and (min-width: 40rem) {
  .vfes-ms-content .vf-flex--item:nth-of-type(2) {
    order: 1;
  }
}

.vfes-ms-content .vf-rate--item {
  max-width: none;
  padding: 0;
}

.vfes-ms-content .vf-container-lane {
  position: relative;
}

.vfes-ms-content .vf-ticket--tabs {
  max-width: none;
  width: 100%;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfbWljcm8uc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBcXVpIHNlIHB1ZWRlbiBpbXBvcnRhciBsaWJyZXLDrWFzIGV4dGVybmFzXG4vLyBlajogQGltcG9ydCAnL3Rvb2xzL2Z1bmN0aW9ucyc7XG5cbkBpbXBvcnQgXCJtaWNyb1wiOyIsIi8vIENTUyBkZWwgbWljcm9zaXRlXG4udmZlcy1tcy1jb250ZW50e1xuICAgIC8vIEdFTkVSQUxcbiAgICAudmYtaW1nIHtcbiAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICB9XG4gICAgLnZmLWJsb2NrIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbiAgICAvLyBIRUFERVJcbiAgICAudmYtaGVhZGVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL2hlYWRlci9jYWJlY2VyYS1tb2JpbGUuanBnXCIpO1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjRweCkge1xuICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9oZWFkZXIvY2FiZWNlcmEtdGFibGV0LmpwZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5NzBweCkge1xuICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9oZWFkZXIvY2FiZWNlcmEtZGVza3RvcC5qcGdcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAvLyBTRUNUSU9OIFNNQVJUTkVUXG4gICAgLnZmLWZsZXgge1xuICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjQwcHgpIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvd1xuICAgICAgfVxuICAgIH1cbiAgICAudmYtZmxleC0taXRlbTpudGgtb2YtdHlwZSgxKSB7IFxuICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjQwcHgpIHtcbiAgICAgICAgb3JkZXI6IDI7XG4gICAgICB9XG4gICAgfVxuICAgIC52Zi1mbGV4LS1pdGVtOm50aC1vZi10eXBlKDIpIHsgXG4gICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2NDBweCl7XG4gICAgICAgIG9yZGVyOiAxOyBcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUkFURVNcbiAgICAudmYtcmF0ZS0taXRlbSB7XG4gICAgICBtYXgtd2lkdGg6IG5vbmU7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgIH0gIFxuICAgIC52Zi1yYXRlLS1pdGVtW2FyaWEtc2VsZWN0ZWQ9dHJ1ZV06OmFmdGVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIH1cbiAgICAudmYtcmF0ZS0taXRlbVthcmlhLXNlbGVjdGVkPXRydWVdIHtcbiAgICAgIGJvcmRlcjogMnB4IHNvbGlkICMwMGIwYzQ7XG4gICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgfVxuICAgIC8vIFRJQ0tFVFxuICAgIC52Zi1jb250YWluZXItbGFuZXtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB9XG4gICAgLnZmLXRpY2tldHtcbiAgICAgICYtLXRhYnMge1xuICAgICAgICBtYXgtd2lkdGg6IG5vbmU7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgfVxuICAgIH1cbn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFDQ0EsQUFFSSxnQkFGWSxDQUVaLE9BQU8sQ0FBQztFQUNOLFNBQVMsRUFBRSxJQUFJO0NBQ2hCOztBQUpMLEFBS0ksZ0JBTFksQ0FLWixTQUFTLENBQUM7RUFDUixPQUFPLEVBQUUsS0FBSztDQUNmOztBQVBMLEFBU0ksZ0JBVFksQ0FTWixVQUFVLENBQUM7RUFDUCxnQkFBZ0IsRUFBRSx3Q0FBd0M7RUFDMUQsZUFBZSxFQUFFLEtBQUs7Q0FPdkI7O0FBTkMsTUFBTSxDQUFDLE1BQU0sTUFBTSxTQUFTLEVBQUUsS0FBSztFQVozQyxBQVNJLGdCQVRZLENBU1osVUFBVSxDQUFDO0lBSUwsZ0JBQWdCLEVBQUUsd0NBQXdDO0dBSzdEOzs7QUFIQyxNQUFNLENBQUMsTUFBTSxNQUFNLFNBQVMsRUFBRSxLQUFLO0VBZjNDLEFBU0ksZ0JBVFksQ0FTWixVQUFVLENBQUM7SUFPTCxnQkFBZ0IsRUFBRSx5Q0FBeUM7R0FFOUQ7OztBQUdELE1BQU0sQ0FBQyxNQUFNLE1BQU0sU0FBUyxFQUFFLEtBQUs7RUFyQnpDLEFBb0JJLGdCQXBCWSxDQW9CWixRQUFRLENBQUM7SUFFTCxPQUFPLEVBQUUsSUFBSTtJQUNiLGNBQWMsRUFBRSxHQUNsQjtHQUNEOzs7QUFFQyxNQUFNLENBQUMsTUFBTSxNQUFNLFNBQVMsRUFBRSxLQUFLO0VBM0J6QyxBQTBCSSxnQkExQlksQ0EwQlosY0FBYyxBQUFBLFlBQWEsQ0FBQSxDQUFDLEVBQUU7SUFFMUIsS0FBSyxFQUFFLENBQUM7R0FFWDs7O0FBRUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxTQUFTLEVBQUUsS0FBSztFQWhDekMsQUErQkksZ0JBL0JZLENBK0JaLGNBQWMsQUFBQSxZQUFhLENBQUEsQ0FBQyxFQUFFO0lBRTFCLEtBQUssRUFBRSxDQUFDO0dBRVg7OztBQW5DTCxBQXFDSSxnQkFyQ1ksQ0FxQ1osY0FBYyxDQUFDO0VBQ2IsU0FBUyxFQUFFLElBQUk7RUFDZixPQUFPLEVBQUUsQ0FBQztDQUNYOztBQXhDTCxBQXlDSSxnQkF6Q1ksQ0F5Q1osY0FBYyxDQUFBLEFBQUEsYUFBQyxDQUFELElBQUMsQUFBQSxDQUFtQixPQUFPLENBQUM7RUFDeEMsZ0JBQWdCLEVBQUUsV0FBVztDQUM5Qjs7QUEzQ0wsQUE0Q0ksZ0JBNUNZLENBNENaLGNBQWMsQ0FBQSxBQUFBLGFBQUMsQ0FBRCxJQUFDLEFBQUEsRUFBb0I7RUFDakMsTUFBTSxFQUFFLGlCQUFpQjtFQUN6QixhQUFhLEVBQUUsR0FBRztDQUNuQjs7QUEvQ0wsQUFpREksZ0JBakRZLENBaURaLGtCQUFrQixDQUFBO0VBQ2hCLFFBQVEsRUFBRSxRQUFRO0NBQ25COztBQW5ETCxBQXFETSxnQkFyRFUsQ0FxRFQsZ0JBQU0sQ0FBQztFQUNOLFNBQVMsRUFBRSxJQUFJO0VBQ2YsS0FBSyxFQUFFLElBQUk7Q0FDWiJ9 */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfbWljcm8uc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBcXVpIHNlIHB1ZWRlbiBpbXBvcnRhciBsaWJyZXLDrWFzIGV4dGVybmFzXG4vLyBlajogQGltcG9ydCAnL3Rvb2xzL2Z1bmN0aW9ucyc7XG5cbkBpbXBvcnQgXCJtaWNyb1wiOyIsIi8vIENTUyBkZWwgbWljcm9zaXRlXG4udmZlcy1tcy1jb250ZW50e1xuICAgIC8vIEdFTkVSQUxcbiAgICAudmYtaW1nIHtcbiAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICB9XG4gICAgLnZmLWJsb2NrIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbiAgICAvLyBIRUFERVJcbiAgICAudmYtaGVhZGVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL2hlYWRlci9jYWJlY2VyYS1tb2JpbGUuanBnXCIpO1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjRweCkge1xuICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9oZWFkZXIvY2FiZWNlcmEtdGFibGV0LmpwZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5NzBweCkge1xuICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltZy9oZWFkZXIvY2FiZWNlcmEtZGVza3RvcC5qcGdcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAvLyBTRUNUSU9OIFNNQVJUTkVUXG4gICAgLnZmLWZsZXgge1xuICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjQwcHgpIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvd1xuICAgICAgfVxuICAgIH1cbiAgICAudmYtZmxleC0taXRlbTpudGgtb2YtdHlwZSgxKSB7IFxuICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjQwcHgpIHtcbiAgICAgICAgb3JkZXI6IDI7XG4gICAgICB9XG4gICAgfVxuICAgIC52Zi1mbGV4LS1pdGVtOm50aC1vZi10eXBlKDIpIHsgXG4gICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2NDBweCl7XG4gICAgICAgIG9yZGVyOiAxOyBcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUkFURVNcbiAgICAudmYtcmF0ZS0taXRlbSB7XG4gICAgICBtYXgtd2lkdGg6IG5vbmU7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgIH0gIFxuICAgIC52Zi1yYXRlLS1pdGVtW2FyaWEtc2VsZWN0ZWQ9dHJ1ZV06OmFmdGVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIH1cbiAgICAudmYtcmF0ZS0taXRlbVthcmlhLXNlbGVjdGVkPXRydWVdIHtcbiAgICAgIGJvcmRlcjogMnB4IHNvbGlkICMwMGIwYzQ7XG4gICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgfVxuICAgIC8vIFRJQ0tFVFxuICAgIC52Zi1jb250YWluZXItbGFuZXtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB9XG4gICAgLnZmLXRpY2tldHtcbiAgICAgICYtLXRhYnMge1xuICAgICAgICBtYXgtd2lkdGg6IG5vbmU7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgfVxuICAgIH1cbn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFDQ0EsQUFFSSxnQkFGWSxDQUVaLE9BQU8sQ0FBQztFQUNOLFNBQVMsRUFBRSxJQUFJO0NBQ2hCOztBQUpMLEFBS0ksZ0JBTFksQ0FLWixTQUFTLENBQUM7RUFDUixPQUFPLEVBQUUsS0FBSztDQUNmOztBQVBMLEFBU0ksZ0JBVFksQ0FTWixVQUFVLENBQUM7RUFDUCxnQkFBZ0IsRUFBRSx3Q0FBd0M7RUFDMUQsZUFBZSxFQUFFLEtBQUs7Q0FPdkI7O0FBTkMsTUFBTSxDQUFDLE1BQU0sTUFBTSxTQUFTLEVBQUUsS0FBSztFQVozQyxBQVNJLGdCQVRZLENBU1osVUFBVSxDQUFDO0lBSUwsZ0JBQWdCLEVBQUUsd0NBQXdDO0dBSzdEOzs7QUFIQyxNQUFNLENBQUMsTUFBTSxNQUFNLFNBQVMsRUFBRSxLQUFLO0VBZjNDLEFBU0ksZ0JBVFksQ0FTWixVQUFVLENBQUM7SUFPTCxnQkFBZ0IsRUFBRSx5Q0FBeUM7R0FFOUQ7OztBQUdELE1BQU0sQ0FBQyxNQUFNLE1BQU0sU0FBUyxFQUFFLEtBQUs7RUFyQnpDLEFBb0JJLGdCQXBCWSxDQW9CWixRQUFRLENBQUM7SUFFTCxPQUFPLEVBQUUsSUFBSTtJQUNiLGNBQWMsRUFBRSxHQUNsQjtHQUNEOzs7QUFFQyxNQUFNLENBQUMsTUFBTSxNQUFNLFNBQVMsRUFBRSxLQUFLO0VBM0J6QyxBQTBCSSxnQkExQlksQ0EwQlosY0FBYyxBQUFBLFlBQWEsQ0FBQSxDQUFDLEVBQUU7SUFFMUIsS0FBSyxFQUFFLENBQUM7R0FFWDs7O0FBRUMsTUFBTSxDQUFDLE1BQU0sTUFBTSxTQUFTLEVBQUUsS0FBSztFQWhDekMsQUErQkksZ0JBL0JZLENBK0JaLGNBQWMsQUFBQSxZQUFhLENBQUEsQ0FBQyxFQUFFO0lBRTFCLEtBQUssRUFBRSxDQUFDO0dBRVg7OztBQW5DTCxBQXFDSSxnQkFyQ1ksQ0FxQ1osY0FBYyxDQUFDO0VBQ2IsU0FBUyxFQUFFLElBQUk7RUFDZixPQUFPLEVBQUUsQ0FBQztDQUNYOztBQXhDTCxBQXlDSSxnQkF6Q1ksQ0F5Q1osY0FBYyxDQUFBLEFBQUEsYUFBQyxDQUFELElBQUMsQUFBQSxDQUFtQixPQUFPLENBQUM7RUFDeEMsZ0JBQWdCLEVBQUUsV0FBVztDQUM5Qjs7QUEzQ0wsQUE0Q0ksZ0JBNUNZLENBNENaLGNBQWMsQ0FBQSxBQUFBLGFBQUMsQ0FBRCxJQUFDLEFBQUEsRUFBb0I7RUFDakMsTUFBTSxFQUFFLGlCQUFpQjtFQUN6QixhQUFhLEVBQUUsR0FBRztDQUNuQjs7QUEvQ0wsQUFpREksZ0JBakRZLENBaURaLGtCQUFrQixDQUFBO0VBQ2hCLFFBQVEsRUFBRSxRQUFRO0NBQ25COztBQW5ETCxBQXFETSxnQkFyRFUsQ0FxRFQsZ0JBQU0sQ0FBQztFQUNOLFNBQVMsRUFBRSxJQUFJO0VBQ2YsS0FBSyxFQUFFLElBQUk7Q0FDWiJ9 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
