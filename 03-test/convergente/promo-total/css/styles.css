/**
 * Vodafone Reboot Framework: Version 2.7.1. Generation Date: 2020-11-23T15:05:27.476Z
 */

.vfes-tabs__container {
  margin-top: 1rem;
  padding-bottom: 1rem;
}

.vfms-logos {
  width: 100%;
  justify-content: center;
  margin: 0 0 3.125rem 0;
  align-items: center;
  display: flex;
}

@media only screen and (max-width: 40.5rem) {
  .vfms-logos {
    margin: 0.3125rem;
  }
}

@media only screen and (max-width: 40.5rem) {
  .vfms-mobile--hidden {
    display: none;
  }
}

.vfms-title--mobile {
  margin-top: 1.25rem;
}

@media only screen and (max-width: 40.5rem) {
  .vfms-title--mobile {
    margin: 0.625rem 0.9375rem;
    margin-bottom: 0 !important;
  }
}

.vfms-item {
  margin-right: 2.8125rem;
}

@media only screen and (max-width: 40.5rem) {
  .vfms-item {
    margin: 0.9375rem;
    width: 3.9375rem;
  }
}

.vfms-prebutton {
  align-items: center;
}

.vfes-layout.why__background {
  background-image:  url('../img/why-vodafone-light-gray.jpg?v=996378040a10e14b6a0ad9ee17a2a7db');
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
}

.vfms-gigas {
  max-width: 5rem;
  margin: 0.3125rem 1.25rem;
}

@media only screen and (max-width: 40.5rem) {
  .vfms-gigas {
    max-width: 3.875rem;
    margin: 0.625rem;
  }
}

.vfms-coverage-img,
.vfes-cards-standard__img-icon {
  margin-right: 1.25rem;
}

.vfms-coverage-img {
  padding-right: 1.25rem;
  padding-left: 1.25rem;
}

.vfes-layout.vfms-lines {
  padding: 0.625rem;
}

@media screen and (min-width: 64rem) {
  .vfes-layout.vfms-lines.vfms-margin--bottom {
    margin-bottom: 2rem;
  }
}

.vfes-cards-standard.vfes-link.vfes-link--red-chevron.vfes-color-bg-vodafone-white.vfes-box-shadow:hover {
  text-decoration: none;
}

.vfes-cards-standard.vfes-color-bg-vodafone-white.vfes-box-shadow.vfms-banner {
  flex-direction: column;
}

@media screen and (min-width: 48rem) {
  .vfes-cards-standard.vfes-color-bg-vodafone-white.vfes-box-shadow.vfms-banner {
    flex-direction: row;
  }
}

.vfes-cards-standard.vfes-color-bg-vodafone-white.vfes-box-shadow.vfms-banner .vfms-fullimg {
  width: 100%;
}

@media screen and (min-width: 48rem) {
  .vfes-cards-standard.vfes-color-bg-vodafone-white.vfes-box-shadow.vfms-banner .vfms-fullimg {
    width: 20.4375rem;
    margin-right: 1.5rem;
  }
}

.vfes-cards-standard.vfes-color-bg-vodafone-white.vfes-box-shadow.vfms-banner .vfms-text-banner {
  padding: 0.9375rem 0.625rem;
}

@media screen and (min-width: 64rem) {
  .vfes-cards-standard.vfes-color-bg-vodafone-white.vfes-box-shadow.vfms-banner .vfms-text-banner {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-around;
  }
}

.vfes-cards-standard.vfes-color-bg-vodafone-white.vfes-box-shadow.vfms-banner .vfms-text-banner .vfms-flex--banner {
  max-width: 34.375rem;
}

@media screen and (min-width: 48rem) {
  .vfes-cards-standard.vfes-color-bg-vodafone-white.vfes-box-shadow.vfms-banner .vfms-button--banner {
    width: 11.25rem;
  }
}

.vfes-cards-standard.vfes-color-bg-vodafone-white.vfes-box-shadow.vfms-banner .vfms-button--banner {
  margin-top: 0.625rem;
}

.vfes-layout.modal-info {
  padding-top: 0;
}

.vfms-rate-uses-list__item.vfms-rate-uses-list__item--icon-valid:before {
  content: '';
  background:  url('../img/checkverde.png?v=1507ffeb98245b51e1128fcd9cda5d25');
  display: inline-block;
  padding: 0;
  vertical-align: top;
  margin-right: 0.3125rem;
}

.vfms-check {
  width: 1.875rem;
}

.vfms-inline {
  display: flex;
}

.vfes-cards-standard__img-icon {
  height: 6.25rem;
}

.vfes-title.vfes-title--bold.vfes-title--3 {
  margin-bottom: 1rem;
}

@media screen and (min-width: 48rem) {
  .vfes-title.vfes-title--bold.vfes-title--3 {
    font-size: 1.25rem;
  }
}

@media screen and (min-width: 64rem) {
  .vfes-title.vfes-title--bold.vfes-title--3 {
    font-size: 1.75rem;
  }
}

.vfms-rates--text {
  text-align: left;
}

@media only screen and (max-width: 40rem) {
  .vfes-ws10
.vfes-sticky
.vfes-tag-label__outstanding.vfms-outstanding-mobile {
    display: flex;
    border-radius: 0.3125rem 0.3125rem 0 0;
    padding: 0 0.1875rem;
    left: -0.0625rem;
    background: #007c92;
    top: -1.05rem;
  }
  .vfes-tag-label__outstanding.vfms-outstanding-mobile .vfes-paragraph {
    font-size: 0.875rem;
  }
  .vfes-ws10 .vfes-card-rate--closed {
    overflow: initial;
  }
}

.vfes-ms-content {
  /*legal*/
  /* tabs ajustes */
  /* Modal */
  /* Popup */
  /*Coverage*/
}

@media screen and (min-width: 60.625rem) {
  .vfes-ms-content {
    margin-bottom: 2rem;
  }
}

.vfes-ms-content .vfms-offer .vfes-title {
  margin-bottom: 1rem;
}

.vfes-ms-content .vfms-offer .vfms-flex-info {
  display: flex;
  align-items: center;
  margin: 0.625rem 0.3125rem;
}

.vfes-ms-content .vfms-offer .vfms-flex-info .vfms-space {
  margin-right: 1.25rem;
}

.vfes-ms-content .vfms-offer .vfms-flex-info .vfms-tv {
  margin-right: 0.625rem;
  height: 1.5rem;
}

@media screen and (min-width: 60.625rem) {
  .vfes-ms-content .vfms-offer .vfms-flex-info .vfms-tv {
    height: 1.875rem;
  }
}

.vfes-ms-content .vfms-offer .vfms-flex-info .logo-hbo {
  width: 3.125rem;
}

.vfes-ms-content .vfms-offer .vfes-card-rate__accordion-price {
  margin: 0.625rem -0.625rem;
}

.vfes-ms-content .vfms-offer .vfms-flex-container {
  display: flex;
  justify-content: space-around;
  margin: 1.25rem 0.9375rem;
}

@media screen and (min-width: 40.5rem) {
  .vfes-ms-content .vfms-offer .vfms-flex-container {
    margin: 1.25rem 0.625rem 1.25rem 2.5rem;
    justify-content: space-between;
  }
}

@media screen and (min-width: 60.625rem) {
  .vfes-ms-content .vfms-offer .vfms-flex-container {
    margin: 1.25rem 1.875rem 1.25rem 3.125rem;
  }
}

.vfes-ms-content .vfms-offer .vfms-container--center {
  display: flex;
  justify-content: center;
  margin: 1.25rem 0 1.25rem -4.375rem;
}

@media screen and (min-width: 60.625rem) {
  .vfes-ms-content .vfms-offer .vfms-container--center {
    margin: 1.25rem 0 1.25rem -4.375rem;
  }
}

@media screen and (min-width: 60.625rem) {
  .vfes-ms-content .vfms-offer .vfes-card-rate__accordion.vfes-card-rate__accordion-ilimit {
    min-height: 20rem;
  }
}

@media screen and (min-width: 40.5rem) {
  .vfes-ms-content .vfms-offer .vfms-ilimit {
    padding-top: 3.125rem;
  }
}

@media screen and (min-width: 60.625rem) {
  .vfes-ms-content .vfms-offer .vfms-ilimit {
    padding-top: 2.8125rem;
  }
}

.vfes-ms-content .vfms-offer-imgtv-mobile {
  display: none;
}

@media only screen and (max-width: 40.5rem) {
  .vfes-ms-content .vfms-offer-imgtv-mobile {
    display: block;
    width: 100%;
    padding-bottom: 1.25rem;
  }
}

@media only screen and (max-width: 40.5rem) {
  .vfes-ms-content .vfms-offer-imgtv {
    display: none;
  }
}

.vfes-ms-content .vfms-offer-tv {
  display: flex;
  flex-flow: row;
  padding: 0;
  align-items: center;
  align-content: center;
  max-width: 100%;
  margin: 0 auto;
  position: relative;
  margin-bottom: 1.875rem;
}

@media only screen and (max-width: 48.0625rem) {
  .vfes-ms-content .vfms-offer-tv {
    flex-wrap: nowrap;
    max-width: 80%;
  }
}

@media only screen and (max-width: 40.5rem) {
  .vfes-ms-content .vfms-offer-tv {
    flex-wrap: nowrap;
    flex-direction: column;
    max-width: 80%;
  }
}

.vfes-ms-content .vfms-offer-tv .vfes-flexy {
  display: flex;
  align-items: center;
  padding-left: 1.25rem;
}

@media only screen and (max-width: 48.0625rem) {
  .vfes-ms-content .vfms-offer-tv .vfes-flexy {
    flex-direction: column;
    padding-left: 1.25rem;
    align-items: start;
  }
}

@media only screen and (max-width: 40.5rem) {
  .vfes-ms-content .vfms-offer-tv .vfes-flexy {
    flex-direction: column;
    padding: 0 1.25rem;
    align-items: start;
  }
}

.vfes-ms-content .vfms-offer-tv .vfes-title {
  max-width: 37.5rem;
  padding: 0 1.875rem 0 0;
  margin: 0;
  text-align: left;
  font-size: 2.25rem;
  font-family: 'VodafoneRegular';
}

@media only screen and (max-width: 48.0625rem) {
  .vfes-ms-content .vfms-offer-tv .vfes-title {
    font-size: 1.25rem;
  }
}

.vfes-ms-content .vfms-offer-tv .vfes-button {
  margin-left: 3.75rem;
  margin-bottom: 0.625rem;
}

@media only screen and (max-width: 48rem) {
  .vfes-ms-content .vfms-offer-tv .vfes-button {
    margin-bottom: 0.625rem;
    margin-left: 0;
  }
}

@media only screen and (max-width: 40.5rem) {
  .vfes-ms-content .vfms-offer-tv .vfes-button {
    margin-bottom: 0.625rem;
    margin-left: 0;
  }
}

.vfes-ms-content .vfes-title.vfes-title--3 {
  margin-bottom: 1rem;
}

.vfes-ms-content .vfes-card-rate-filter .vfes-tabs__content .vfes-layout.vfms-offer {
  margin: 0;
  padding: 0;
}

.vfes-ms-content .vfes-card-rate-filter
.vfes-tabs__content
.vfes-layout.vfms-offer
.vfms-title-offer {
  padding: 1.5rem 0 1.5rem 0;
  margin-bottom: 0;
}

@media only screen and (max-width: 40rem) {
  .vfes-ms-content .vfes-card-rate-filter
.vfes-tabs__content
.vfes-layout.vfms-offer
.vfms-title-offer {
    display: none;
  }
}

.vfes-ms-content .vfes-card-rate .vfes-bestprice {
  display: flex;
  padding: 0.3125rem 0;
}

.vfes-ms-content .vfes-card-rate .vfes-bestprice img {
  width: 1.5rem;
  height: 1.5rem;
}

.vfes-ms-content .vfes-card-rate .vfes-paragraph {
  font-size: 1rem;
  padding: 0 0.3125rem;
  margin-bottom: 0;
}

@media all and (min-width: 40rem) {
  .vfes-ms-content .vfes-card-rate__dataitem-info-price, .vfes-ms-content .vfes-card-rate__dataitem-info-rate {
    padding-bottom: 0;
  }
}

.vfes-ms-content section.vfes-card-rate.vfes-card-rate--special.vfes-box-shadow {
  border: 0.0625rem solid #007c92;
  border-radius: 0 0.625rem 0.625rem;
}

.vfes-ms-content[data-iva='false'] .iva {
  display: none;
}

.vfes-ms-content[data-iva='true'] .noIva {
  display: none;
}

.vfes-ms-content .vfes-link--no-chevron {
  text-decoration: underline;
}

.vfes-ms-content .vfes-hero-image .vfes-title {
  margin-bottom: 0;
  max-width: 100%;
}

.vfes-ms-content .vfes-tabs {
  position: relative;
}

.vfes-ms-content .vfes-tabs .vfes-tag-label__outstanding {
  display: flex;
  align-items: center;
  padding: 0.3125rem 0.875rem 0.3125rem 0.625rem;
  left: -0.0625rem;
  top: -1.875rem;
}

.vfes-ms-content .vfes-tabs .vfes-tag-label--black.vfes-tag-label::after {
  display: none;
}

.vfes-ms-content .vfes-tabs .vfes-tag-label--black .vfes-tag-label__outstanding {
  background: #007c92;
  border-radius: 0.3125rem 0.3125rem 0rem 0rem;
}

.vfes-ms-content .vfes-tabs .vfes-tag-label--black.vfes-tag-label::after {
  top: 0.3rem;
  left: -0.6875rem;
}

.vfes-ms-content .vfes-tabs__container {
  display: none;
}

.vfes-ms-content .vfes-tabs__content {
  text-align: left;
}

.vfes-ms-content .vfes-tabs__content .vfes-layout {
  padding: 0.625rem;
}

.vfes-ms-content .vfes-tabs__tab {
  padding: 0;
}

.vfes-ms-content .vfms-tabs__container.vfes-tabs__container {
  margin-bottom: 0;
}

.vfes-ms-content .vfes-card-shop:not(.vfes-sticky__item--added) {
  margin-bottom: 0.25rem;
}

.vfes-ms-content .vfes-tag-label__outstanding {
  border-top-left-radius: 0.375rem;
  border-top-right-radius: 0.375rem;
  border-bottom-right-radius: 0.375rem;
}

.vfes-ms-content .vfms-ilimit
.vfes-card-rate__dataitem[class*='vfes-colours'].vfes-card-rate__dataitem-ilimit {
  padding-bottom: 0.625rem;
}

.vfes-ms-content .vfms-card-rate__tooltip {
  position: relative;
  padding: 0.625rem 0 0.3125rem 0;
  border-bottom: 0.0625rem solid #ebebeb;
  margin-bottom: 0.3125rem;
  display: flex;
  justify-content: center;
  align-items: center;
}

@media only screen and (max-width: 40rem) {
  .vfes-ms-content .vfms-card-rate__tooltip {
    display: none;
  }
}

.vfes-ms-content .vfms-card-rate__tooltip p {
  margin-bottom: 0;
  display: flex;
  align-items: center;
  padding: 0 0.5rem 0 0.5rem;
}

.vfes-ms-content .vfms-card-rate__tooltip button {
  position: relative;
  bottom: initial;
  right: initial;
}

.vfes-ms-content .vfes-button--secondary {
  margin-top: 2rem;
}

.vfes-ms-content .vfes-carousel {
  margin-bottom: 2.5rem;
}

.vfes-ms-content .iva__container {
  position: absolute;
  bottom: calc(100% - 2rem);
  left: 0;
  width: 100%;
}

.vfes-ms-content .iva__wrapper {
  text-align: center;
  letter-spacing: normal;
}

.vfes-ms-content .iva__box {
  display: inline-block;
  vertical-align: top;
}

.vfes-ms-content .iva__box:first-child {
  margin-right: 1.25rem;
}

.vfes-ms-content .iva__button {
  position: relative;
  font-size: 1rem;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
}

.vfes-ms-content .iva__button::before {
  content: '';
  display: inline-block;
  width: 1.25rem;
  height: 1.25rem;
  border: 0.0625rem solid #999;
  background-color: #fff;
  border-radius: 100%;
  margin-right: 0.3125rem;
}

.vfes-ms-content .iva__button.active::before {
  box-shadow: 0 0 0 0.0625rem #007c92;
  border: 0.1875rem solid #fff;
  background-color: #007c92;
  width: 1rem;
  height: 1rem;
}

.vfes-ms-content .why__background {
  background-image:  url('../img/why-vodafone-light-gray.jpg?v=996378040a10e14b6a0ad9ee17a2a7db');
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
}

.vfes-ms-content .why__background .vfes-layout__item[class*='1/4'] {
  margin-bottom: 1.9375rem;
}

.vfes-ms-content .why__img {
  margin-bottom: 0.875rem;
}

.vfes-ms-content .mb0 {
  margin-bottom: 0.625rem;
}

.vfes-ms-content .vfes-title + .vfes-button {
  margin-top: 1.1875rem;
}

.vfes-ms-content .vfes-card img {
  margin-bottom: 0;
}

.vfes-ms-content .vfes-card__price {
  margin-top: 0.75rem;
}

.vfes-ms-content .vfms-pride {
  display: flex;
  overflow: hidden;
  position: relative;
}

.vfes-ms-content .vfms-pride_flex {
  display: flex;
}

.vfes-ms-content .vfes-cards-standard:hover {
  text-decoration: none;
}

.vfes-ms-content .vfes-cards-standard__text {
  display: block;
}

.vfes-ms-content .vfes-cards-standard__text .vfes-title {
  font-size: 1.75rem;
}

@media only screen and (max-width: 40rem) {
  .vfes-ms-content .vfes-cards-standard__text .vfes-title {
    font-size: 1.25rem;
  }
}

.vfes-ms-content .vfes-cards-standard__img-icon {
  width: 7.5rem;
}

@media only screen and (max-width: 40rem) {
  .vfes-ms-content .vfes-cards-standard__img-icon {
    width: 5.625rem;
  }
}

.vfes-ms-content .vfms-lines .vfes-cards-standard.vfes-link {
  padding: 0.625rem 0 0.625rem 0;
}

.vfes-ms-content .vfes-layout__item .vfes-link.vfes-link--no-chevron {
  margin: 0.625rem;
}

@media only screen and (max-width: 40rem) {
  .vfes-ms-content .vfms-legal-only-desktop {
    display: none;
  }
}

@media only screen and (max-width: 40rem) {
  .vfes-ms-content .link-legal {
    margin-bottom: 3.125rem;
  }
}

@media only screen and (max-width: 48rem) {
  .vfes-ms-content .vfes-tabs--group > .vfes-tabs__container {
    margin-top: 5rem;
  }
}

.vfes-ms-content .vfes-modal__content-legal {
  padding: 0 2.5rem 2.5rem 2.5rem;
}

.vfes-ms-content .vfes-modal__content-legal h4 {
  padding-top: 1.875rem;
  padding-bottom: 1.25rem;
}

.vfes-ms-content .vfes-modal__content-legal ul {
  padding-top: 1.25rem;
  padding-bottom: 1.875rem;
}

.vfes-ms-content .vfes-modal__content-legal img {
  padding-top: 1.25rem;
  padding-bottom: 1.875rem;
}

.vfes-ms-content .vfms-rate-uses-list {
  margin: 0;
  padding: 0;
  list-style: none;
}

.vfes-ms-content .vfms-rate-uses-list__item {
  display: inline-block;
  margin: 0 1.875rem 0.625rem 0;
}

.vfes-ms-content .vfms-rate-uses-list__item-text {
  display: inline-block;
}

.vfes-ms-content .vfms-rate-uses-list__item--icon-valid:before {
  content: '';
  background:  url('../img/check-icon.svg?v=0122f1940f795df2d326c83caffcbe03') no-repeat center center;
  display: inline-block;
  height: 0.9375rem;
  margin-right: 0;
  vertical-align: middle;
  width: 1.25rem;
}

.vfes-ms-content .vfms-rate-uses-list__item--icon-invalid:before {
  content: '';
  background:  url('../img/check-cross-icon.svg?v=68ae61509413f5f1c28f11bcabcd89ff') no-repeat center center;
  display: inline-block;
  height: 0.9375rem;
  margin-right: 0;
  vertical-align: middle;
  width: 1.25rem;
}

.vfes-ms-content .modal-info {
  padding-bottom: 3.75rem;
  padding-top: 1.25rem;
}

@media only screen and (max-width: 40rem) {
  .vfes-ms-content .vfes-tabs__container {
    display: none !important;
  }
  .vfes-ms-content .vfes-tabs__content {
    display: block !important;
    border-top: none;
    padding-top: 0.3125rem !important;
    padding-bottom: 0;
  }
  .vfes-ms-content .vfes-tabs__content:first-of-type .vfes-layout {
    padding-bottom: 0;
  }
  .vfes-ms-content .vfes-tabs__content:last-of-type .vfes-layout {
    padding-top: 0;
  }
}

@media screen and (min-width: 40rem) {
  .vfes-ms-content .vfes-tabs__container {
    display: block;
  }
  .vfes-ms-content .mb0 {
    margin-bottom: 0;
  }
  .vfes-ms-content .iva__container {
    bottom: calc(100% - 6.875rem);
  }
  .vfes-ms-content .iva__wrapper {
    padding: 0 1.25rem;
    text-align: right;
  }
}

@media screen and (min-width: 40rem) and (max-width: 60.625rem) {
  .vfes-ms-content .mt-tablet {
    margin-top: 2.5625rem;
  }
}

@media screen and (min-width: 60.625rem) {
  .vfes-ms-content .vfes-tabs__content {
    text-align: center;
  }
  .vfes-ms-content .vfes-tabs__content .vfes-layout__wrapper .vfes-layout__item {
    padding: 0;
  }
  .vfes-ms-content .vfes-tabs__content-open[data-tab='1'] ~ .iva__container .iva__wrapper {
    max-width: 51.25rem;
  }
  .vfes-ms-content .iva__container {
    bottom: calc(100% - 5.625rem);
  }
  .vfes-ms-content .iva__wrapper {
    max-width: 75rem;
    margin: 0 auto;
  }
  .vfes-ms-content .why__background .vfes-layout__item[class*='1/4'] {
    margin-bottom: 0;
  }
}

.vfes-ms-content .vfms-why {
  background-image:  url('../img/geometric-bg.jpg?v=07da7aac0e0c88c3e25a5aacce714214');
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
}

.vfes-ms-content .vfms-why img {
  padding: 1.25rem 0rem;
}

.vfes-ms-content .vfms-why__list {
  padding: 0 0 0.625rem 0;
  list-style: none;
}

.vfes-ms-content .vfms-why__title {
  padding: 0.3125rem 0rem 0.3125rem 0rem;
  margin: 0;
  font-family: 'VodafoneLight', Helvetica, Arial, sans-serif;
  min-height: 4.5rem;
}

@media only screen and (max-width: 48rem) {
  .vfes-ms-content .vfms-why__title {
    margin-top: 0.625rem;
    min-height: 1.875rem;
  }
}

.vfes-ms-content .vfms-why__text {
  padding-bottom: 0.625rem;
  max-width: 15.5rem;
  margin: 0 auto;
  position: relative;
}

.vfes-ms-content .vfms-why__mobile {
  margin-top: 0.9375rem;
}

.vfes-ms-content .vfms-why__mobile .vfms-rate-uses-list li {
  margin: 0;
}

.vfes-ms-content .vfms-why__mobile .vfms-rate-uses-list .vfms-rate-uses-list__item--icon-valid:before {
  width: 0;
  padding: 0.625rem 0.625rem 0.3125rem 0.625rem;
}

.vfes-ms-content .vfms-why__mobile .vfms-rate-uses-list .vfms-rate-uses-list__item--icon-invalid:before {
  width: 0;
  padding: 0.625rem 0.625rem 0.3125rem 0.625rem;
}

.vfes-ms-content .vfms-why__img {
  max-width: 8.125rem;
}

.vfes-ms-content .vfms-why .vfes-paragraph {
  font-family: 'VodafoneLight';
}

.vfes-ms-content .vfms-why ul.vfes-align--center {
  padding: 0;
}

@media only screen and (max-width: 40rem), only screen and (max-device-width: 40rem) {
  .vfes-ms-content .vfms-why ul.vfes-align--center {
    padding: 0;
  }
}

.vfes-ms-content .vfms-rate-uses-list {
  margin: 0;
  padding: 0;
  list-style: none;
  flex-wrap: wrap;
}

.vfes-ms-content .vfms-rate-uses-list__item {
  margin: 0 0.3125rem 0.625rem 0;
}

.vfes-ms-content .vfms-rate-uses-list__item-text {
  display: inline-block;
}

.vfes-ms-content .vfms-rate-uses-list__item--icon-valid {
  padding: 0.125rem 0.3125rem 0.125rem 0.125rem;
}

.vfes-ms-content .vfms-rate-uses-list__item--icon-valid:before {
  content: '';
  background:  url('../img/check-icon.svg?v=0122f1940f795df2d326c83caffcbe03') no-repeat center center;
  display: inline-block;
  padding: 0;
  vertical-align: top;
  margin-right: 0.3125rem;
}

.vfes-ms-content .vfms-rate-uses-list__item--icon-invalid {
  padding: 0.125rem 0.3125rem 0.125rem 0.125rem;
}

.vfes-ms-content .vfms-rate-uses-list__item--icon-invalid:before {
  content: '';
  background:  url('../img/check-cross-icon.svg?v=68ae61509413f5f1c28f11bcabcd89ff') no-repeat center center;
  display: inline-block;
  padding: 0rem 0 0.3125rem 0.3125rem;
  vertical-align: middle;
}

.vfes-ms-content .vfms-why__mobile {
  padding: 0.9375rem 0rem;
  border-radius: 0.375rem;
}

.vfes-ms-content .vfms-why__mobile ul {
  display: flex;
  justify-content: start;
  flex-wrap: wrap;
  margin: 0 auto;
  position: relative;
  width: 95%;
}

.vfes-ms-content .vfms-faq__button--content {
  padding-top: 1.25rem;
}

.vfes-ms-content .vfms-coverage {
  height: 100%;
  letter-spacing: -0.325rem;
  list-style: none;
  margin: 0;
  padding: 1rem 0 2rem 0;
}

.vfes-ms-content .vfms-coverage-img {
  padding-right: 1.25rem;
  padding-left: 1.25rem;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
