/**
 * Vodafone Reboot Framework: Version 13.0.2. Generation Date: 2019-10-02T12:25:15.022Z
 */

.vfms-overlay {
  background: rgba(0, 0, 0, 0.85);
  position: fixed;
  z-index: 3;
  height: 100vh;
  width: 100vw;
}

.vfes-ms-content {
  display: none;
}

@media all and (min-width: 40rem) {
  .vfes-ms-content {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .vfes-ms-content .vfms-popup {
    width: 37.375rem;
    height: 21.875rem;
    background: #fff;
    background-size: cover;
    background-repeat: no-repeat;
    border-radius: 0.375rem;
    padding: 0 1.625rem;
  }
  .vfes-ms-content .vfms-popup .vfms-flex {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .vfes-ms-content .vfms-popup .vfms-close {
    position: absolute;
    right: 0;
    top: -1.875rem;
  }
  .vfes-ms-content .vfms-popup .vfms-device {
    display: flex;
    justify-content: center;
    max-height: 15.5rem;
  }
  .vfes-ms-content .vfms-popup .vfms-special--size {
    font-size: 1.25rem;
  }
  .vfes-ms-content .vfms-popup .vfes-button {
    width: 16rem;
    height: 2.75rem;
    font-size: 1.125rem;
  }
}

@media all and (min-width: 64rem) {
  .vfes-ms-content {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .vfes-ms-content .vfms-popup {
    width: 45.3125rem;
    height: 21.875rem;
    background: #fff;
    background-size: cover;
    background-repeat: no-repeat;
    border-radius: 0.375rem;
    padding: 0 3.5625rem;
  }
  .vfes-ms-content .vfms-popup .vfms-close {
    position: absolute;
    right: -1.875rem;
    top: -2.5rem;
  }
  .vfes-ms-content .vfms-popup .vfms-device {
    display: flex;
    justify-content: center;
    max-height: 15.5rem;
  }
  .vfes-ms-content .vfms-popup .vfms-special--size {
    font-size: 1.25rem;
  }
  .vfes-ms-content .vfms-popup .vfes-button {
    width: 16rem;
    height: 2.75rem;
    font-size: 1.125rem;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfbWljcm8uc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBcXVpIHNlIHB1ZWRlbiBpbXBvcnRhciBsaWJyZXLDrWFzIGV4dGVybmFzXG4vLyBlajogQGltcG9ydCAnL3Rvb2xzL2Z1bmN0aW9ucyc7XG5cbkBpbXBvcnQgXCJtaWNyb1wiOyIsIi8vIENTUyBkZWwgbWljcm9zaXRlXG4udmZtcy1vdmVybGF5IHtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLC44NSk7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHotaW5kZXg6IDM7XG4gICAgaGVpZ2h0OiAxMDB2aDtcbiAgICB3aWR0aDogMTAwdnc7XG59XG4udmZlcy1tcy1jb250ZW50e1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogNjQwcHgpIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIC52Zm1zLXBvcHVwe1xuICAgICAgICAgICAgd2lkdGg6IDU5OHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAzNTBweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDAgMjZweDtcblxuICAgICAgICAgICAgLnZmbXMtZmxleCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAudmZtcy1jbG9zZXtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgICAgICAgICAgdG9wOiAtMzBweDtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC52Zm1zLWRldmljZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBtYXgtaGVpZ2h0OiAyNDhweDtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC52Zm1zLXNwZWNpYWwtLXNpemUge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC52ZmVzLWJ1dHRvbntcbiAgICAgICAgICAgICAgICB3aWR0aDogMjU2cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA0NHB4O1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfSAgXG4gICAgfVxuICAgIEBtZWRpYSBhbGwgYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgLnZmbXMtcG9wdXB7XG4gICAgICAgICAgICB3aWR0aDogNzI1cHg7XG4gICAgICAgICAgICBoZWlnaHQ6IDM1MHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICAgICAgcGFkZGluZzogMCA1N3B4O1xuICAgIFxuICAgICAgICAgICAgLnZmbXMtY2xvc2V7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAtMzBweDtcbiAgICAgICAgICAgICAgICB0b3A6IC00MHB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAudmZtcy1pbmZvIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLnZmbXMtZGV2aWNlIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDI0OHB4O1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLnZmbXMtc3BlY2lhbC0tc2l6ZSB7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLnZmZXMtYnV0dG9ue1xuICAgICAgICAgICAgICAgIHdpZHRoOiAyNTZweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDQ0cHg7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9ICBcbiAgICB9XG59Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQ0NBLEFBQUEsYUFBYSxDQUFDO0VBQ1YsVUFBVSxFQUFFLG1CQUFlO0VBQzNCLFFBQVEsRUFBRSxLQUFL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 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
