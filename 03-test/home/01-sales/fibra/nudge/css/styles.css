/**
 * Vodafone Reboot Framework: Version 2.2.2. Generation Date: 2020-05-27T11:34:00.878Z
 */

.vfes-ms-content .vfms-banner {
  background-image: url("https://www.vodafone.es/c/statics/imagen/Fondo_Fibra_mobile.jpg");
  background-repeat: no-repeat;
  background-size: cover;
  height: 31.25rem;
}

@media screen and (min-width: 48rem) {
  .vfes-ms-content .vfms-banner {
    background-image: url("https://www.vodafone.es/c/statics/imagen/Fondo_Fibra_Tablet.jpg");
    height: 26.5625rem;
  }
}

@media screen and (min-width: 64rem) {
  .vfes-ms-content .vfms-banner {
    background-image: url("https://www.vodafone.es/c/statics/imagen/Fondo_Fibra_Desktop.jpg");
    height: 21.875rem;
  }
}

.vfes-ms-content .vfms-banner-content {
  padding: 1.25rem;
}

.vfes-ms-content .vfms-banner-content .vfms-text-block {
  display: block;
  font-size: 1.5rem;
}

.vfes-ms-content .vfms-banner-content .vfms-text__size {
  font-size: 1.5rem;
}

.vfes-ms-content .vfms-banner-content .vfms-text-itemblock {
  font-size: 2.25rem;
}

.vfes-ms-content .vfms-banner-content .vfms-text__bold {
  font-family: "VodafoneRegularBold", Helvetica, Arial, sans-serif;
}

.vfes-ms-content .vfms-banner-content .vfms-text__width {
  max-width: 16.875rem;
  margin: 0 auto;
}

@media screen and (min-width: 48rem) {
  .vfes-ms-content .vfms-banner-content .vfms-text__width {
    max-width: 22.8125rem;
  }
}

.vfes-ms-content .vfms-banner-content .vfms-text .vfes-title {
  margin-bottom: 1.25rem;
}

.vfes-ms-content .vfms-banner-content .vfms-main__text {
  margin-bottom: 0;
}

.vfes-ms-content .vfms-banner-content .vfms-button {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.vfes-ms-content .vfms-banner-content .vfms-button .vfes-button {
  margin-bottom: 0.625rem;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfbWljcm8uc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBcXVpIHNlIHB1ZWRlbiBpbXBvcnRhciBsaWJyZXLDrWFzIGV4dGVybmFzXG4vLyBlajogQGltcG9ydCAnL3Rvb2xzL2Z1bmN0aW9ucyc7XG5cbkBpbXBvcnQgXCJtaWNyb1wiOyIsIi8vIENTUyBkZWwgbWljcm9zaXRlXG4udmZlcy1tcy1jb250ZW50e1xuICAgIC52Zm1zLWJhbm5lcntcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL3d3dy52b2RhZm9uZS5lcy9jL3N0YXRpY3MvaW1hZ2VuL0ZvbmRvX0ZpYnJhX21vYmlsZS5qcGcnKTtcbiAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgICAgICAgaGVpZ2h0OiA1MDBweDtcbiAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnaHR0cHM6Ly93d3cudm9kYWZvbmUuZXMvYy9zdGF0aWNzL2ltYWdlbi9Gb25kb19GaWJyYV9UYWJsZXQuanBnJyk7XG4gICAgICAgICAgICBoZWlnaHQ6IDQyNXB4O1xuICAgICAgICB9XG4gICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL3d3dy52b2RhZm9uZS5lcy9jL3N0YXRpY3MvaW1hZ2VuL0ZvbmRvX0ZpYnJhX0Rlc2t0b3AuanBnJyk7XG4gICAgICAgICAgICBoZWlnaHQ6IDM1MHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgJi1jb250ZW50e1xuICAgICAgICAgICAgcGFkZGluZzogMjBweDtcblxuICAgICAgICAgICAgLnZmbXMtdGV4dHtcblxuICAgICAgICAgICAgICAgICYtYmxvY2t7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDI0cHg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJl9fc2l6ZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJi1pdGVtYmxvY2t7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAmX19ib2xkIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IFwiVm9kYWZvbmVSZWd1bGFyQm9sZFwiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICZfX3dpZHRoIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAyNzBweDtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG87XG4gICAgICAgICAgICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogMzY1cHg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAudmZlcy10aXRsZXtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAudmZtcy1tYWluX190ZXh0IHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLnZmbXMtYnV0dG9ue1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC52ZmVzLWJ1dHRvbntcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUNDQSxBQUNJLGdCQURZLENBQ1osWUFBWSxDQUFBO0VBQ1IsZ0JBQWdCLEVBQUUsc0VBQXNFO0VBQ3hGLGlCQUFpQixFQUFFLFNBQVM7RUFDNUIsZUFBZSxFQUFFLEtBQUs7RUFDdEIsTUFBTSxFQUFFLEtBQUs7Q0F5RGhCOztBQXhERyxNQUFNLENBQUMsTUFBTSxNQUFNLFNBQVMsRUFBRSxLQUFLO0VBTjNDLEFBQ0ksZ0JBRFksQ0FDWixZQUFZLENBQUE7SUFNSixnQkFBZ0IsRUFBRSxzRUFBc0U7SUFDeEYsTUFBTSxFQUFFLEtBQUs7R0FzRHBCOzs7QUFwREcsTUFBTSxDQUFDLE1BQU0sTUFBTSxTQUFTLEVBQUUsTUFBTTtFQVY1QyxBQUNJLGdCQURZLENBQ1osWUFBWSxDQUFBO0lBVUosZ0JBQWdCLEVBQUUsdUVBQXVFO0lBQ3pGLE1BQU0sRUFBRSxLQUFLO0dBa0RwQjs7O0FBOURMLEFBZVEsZ0JBZlEsQ0FlUCxvQkFBUSxDQUFBO0VBQ0wsT0FBTyxFQUFFLElBQUk7Q0E0Q2hCOztBQTVEVCxBQW9CZ0IsZ0JBcEJBLENBZVAsb0JBQVEsQ0FLQSxnQkFBTSxDQUFBO0VBQ0gsT0FBTyxFQUFFLEtBQUs7RUFDZCxTQUFTLEVBQUUsSUFBSTtDQUNsQjs7QUF2QmpCLEFBeUJnQixnQkF6QkEsQ0FlUCxvQkFBUSxDQVVBLGdCQUFNLENBQUM7RUFDSixTQUFTLEVBQUUsSUFBSTtDQUNsQjs7QUEzQmpCLEFBNEJnQixnQkE1QkEsQ0FlUCxvQkFBUSxDQWFBLG9CQUFVLENBQUE7RUFDUCxTQUFTLEVBQUUsSUFBSTtDQUNsQjs7QUE5QmpCLEFBZ0NnQixnQkFoQ0EsQ0FlUCxvQkFBUSxDQWlCQSxnQkFBTSxDQUFDO0VBQ0osV0FBVyxFQUFFLG1EQUFtRDtDQUNuRTs7QUFsQ2pCLEFBb0NnQixnQkFwQ0EsQ0FlUCxvQkFBUSxDQXFCQSxpQkFBTyxDQUFDO0VBQ0wsU0FBUyxFQUFFLEtBQUs7RUFDaEIsTUFBTSxFQUFFLE1BQU07Q0FJakI7O0FBSEcsTUFBTSxDQUFDLE1BQU0sTUFBTSxTQUFTLEVBQUUsS0FBSztFQXZDdkQsQUFvQ2dCLGdCQXBDQSxDQWVQLG9CQUFRLENBcUJBLGlCQUFPLENBQUM7SUFJRCxTQUFTLEVBQUUsS0FBSztHQUV2Qjs7O0FBMUNqQixBQTRDZ0IsZ0JBNUNBLENBZVAsb0JBQVEsQ0FHTCxVQUFVLENBMEJOLFdBQVcsQ0FBQTtFQUNQLGFBQWEsRUFBRSxJQUFJO0NBQ3RCOztBQTlDakIsQUFnRFksZ0JBaERJLENBZVAsb0JBQVEsQ0FpQ0wsZ0JBQWdCLENBQUM7RUFDYixhQUFhLEVBQUUsQ0FBQztDQUNuQjs7QUFsRGIsQUFtRFksZ0JBbkRJLENBZVAsb0JBQVEsQ0FvQ0wsWUFBWSxDQUFBO0VBQ1IsT0FBTyxFQUFFLElBQUk7RUFDYixjQUFjLEVBQUUsTUFBTTtFQUN0QixXQUFXLEVBQUUsTUFBTTtDQUt0Qjs7QUEzRGIsQUF3RGdCLGdCQXhEQSxDQWVQLG9CQUFRLENBb0NMLFlBQVksQ0FLUixZQUFZLENBQUE7RUFDUixhQUFhLEVBQUUsSUFBSTtDQUN0QiJ9 */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfbWljcm8uc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBcXVpIHNlIHB1ZWRlbiBpbXBvcnRhciBsaWJyZXLDrWFzIGV4dGVybmFzXG4vLyBlajogQGltcG9ydCAnL3Rvb2xzL2Z1bmN0aW9ucyc7XG5cbkBpbXBvcnQgXCJtaWNyb1wiOyIsIi8vIENTUyBkZWwgbWljcm9zaXRlXG4udmZlcy1tcy1jb250ZW50e1xuICAgIC52Zm1zLWJhbm5lcntcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL3d3dy52b2RhZm9uZS5lcy9jL3N0YXRpY3MvaW1hZ2VuL0ZvbmRvX0ZpYnJhX21vYmlsZS5qcGcnKTtcbiAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgICAgICAgaGVpZ2h0OiA1MDBweDtcbiAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnaHR0cHM6Ly93d3cudm9kYWZvbmUuZXMvYy9zdGF0aWNzL2ltYWdlbi9Gb25kb19GaWJyYV9UYWJsZXQuanBnJyk7XG4gICAgICAgICAgICBoZWlnaHQ6IDQyNXB4O1xuICAgICAgICB9XG4gICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMjRweCkge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL3d3dy52b2RhZm9uZS5lcy9jL3N0YXRpY3MvaW1hZ2VuL0ZvbmRvX0ZpYnJhX0Rlc2t0b3AuanBnJyk7XG4gICAgICAgICAgICBoZWlnaHQ6IDM1MHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgJi1jb250ZW50e1xuICAgICAgICAgICAgcGFkZGluZzogMjBweDtcblxuICAgICAgICAgICAgLnZmbXMtdGV4dHtcblxuICAgICAgICAgICAgICAgICYtYmxvY2t7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDI0cHg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJl9fc2l6ZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJi1pdGVtYmxvY2t7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAmX19ib2xkIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IFwiVm9kYWZvbmVSZWd1bGFyQm9sZFwiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICZfX3dpZHRoIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAyNzBweDtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG87XG4gICAgICAgICAgICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogMzY1cHg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAudmZlcy10aXRsZXtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAudmZtcy1tYWluX190ZXh0IHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLnZmbXMtYnV0dG9ue1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC52ZmVzLWJ1dHRvbntcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUNDQSxBQUNJLGdCQURZLENBQ1osWUFBWSxDQUFBO0VBQ1IsZ0JBQWdCLEVBQUUsc0VBQXNFO0VBQ3hGLGlCQUFpQixFQUFFLFNBQVM7RUFDNUIsZUFBZSxFQUFFLEtBQUs7RUFDdEIsTUFBTSxFQUFFLEtBQUs7Q0F5RGhCOztBQXhERyxNQUFNLENBQUMsTUFBTSxNQUFNLFNBQVMsRUFBRSxLQUFLO0VBTjNDLEFBQ0ksZ0JBRFksQ0FDWixZQUFZLENBQUE7SUFNSixnQkFBZ0IsRUFBRSxzRUFBc0U7SUFDeEYsTUFBTSxFQUFFLEtBQUs7R0FzRHBCOzs7QUFwREcsTUFBTSxDQUFDLE1BQU0sTUFBTSxTQUFTLEVBQUUsTUFBTTtFQVY1QyxBQUNJLGdCQURZLENBQ1osWUFBWSxDQUFBO0lBVUosZ0JBQWdCLEVBQUUsdUVBQXVFO0lBQ3pGLE1BQU0sRUFBRSxLQUFLO0dBa0RwQjs7O0FBOURMLEFBZVEsZ0JBZlEsQ0FlUCxvQkFBUSxDQUFBO0VBQ0wsT0FBTyxFQUFFLElBQUk7Q0E0Q2hCOztBQTVEVCxBQW9CZ0IsZ0JBcEJBLENBZVAsb0JBQVEsQ0FLQSxnQkFBTSxDQUFBO0VBQ0gsT0FBTyxFQUFFLEtBQUs7RUFDZCxTQUFTLEVBQUUsSUFBSTtDQUNsQjs7QUF2QmpCLEFBeUJnQixnQkF6QkEsQ0FlUCxvQkFBUSxDQVVBLGdCQUFNLENBQUM7RUFDSixTQUFTLEVBQUUsSUFBSTtDQUNsQjs7QUEzQmpCLEFBNEJnQixnQkE1QkEsQ0FlUCxvQkFBUSxDQWFBLG9CQUFVLENBQUE7RUFDUCxTQUFTLEVBQUUsSUFBSTtDQUNsQjs7QUE5QmpCLEFBZ0NnQixnQkFoQ0EsQ0FlUCxvQkFBUSxDQWlCQSxnQkFBTSxDQUFDO0VBQ0osV0FBVyxFQUFFLG1EQUFtRDtDQUNuRTs7QUFsQ2pCLEFBb0NnQixnQkFwQ0EsQ0FlUCxvQkFBUSxDQXFCQSxpQkFBTyxDQUFDO0VBQ0wsU0FBUyxFQUFFLEtBQUs7RUFDaEIsTUFBTSxFQUFFLE1BQU07Q0FJakI7O0FBSEcsTUFBTSxDQUFDLE1BQU0sTUFBTSxTQUFTLEVBQUUsS0FBSztFQXZDdkQsQUFvQ2dCLGdCQXBDQSxDQWVQLG9CQUFRLENBcUJBLGlCQUFPLENBQUM7SUFJRCxTQUFTLEVBQUUsS0FBSztHQUV2Qjs7O0FBMUNqQixBQTRDZ0IsZ0JBNUNBLENBZVAsb0JBQVEsQ0FHTCxVQUFVLENBMEJOLFdBQVcsQ0FBQTtFQUNQLGFBQWEsRUFBRSxJQUFJO0NBQ3RCOztBQTlDakIsQUFnRFksZ0JBaERJLENBZVAsb0JBQVEsQ0FpQ0wsZ0JBQWdCLENBQUM7RUFDYixhQUFhLEVBQUUsQ0FBQztDQUNuQjs7QUFsRGIsQUFtRFksZ0JBbkRJLENBZVAsb0JBQVEsQ0FvQ0wsWUFBWSxDQUFBO0VBQ1IsT0FBTyxFQUFFLElBQUk7RUFDYixjQUFjLEVBQUUsTUFBTTtFQUN0QixXQUFXLEVBQUUsTUFBTTtDQUt0Qjs7QUEzRGIsQUF3RGdCLGdCQXhEQSxDQWVQLG9CQUFRLENBb0NMLFlBQVksQ0FLUixZQUFZLENBQUE7RUFDUixhQUFhLEVBQUUsSUFBSTtDQUN0QiJ9 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
