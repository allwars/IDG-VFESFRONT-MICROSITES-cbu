/**
 * Vodafone Reboot Framework: Version 15.6.0. Generation Date: 2020-03-02T15:48:18.094Z
 */

.vfes-ms-content-ilimitada .vfms-title__center {
  text-align: center;
}

.vfes-ms-content-ilimitada .vfms-nomargin__bottom {
  margin-bottom: 0;
}

.vfes-ms-content-ilimitada .vfms-nopadding__bottom {
  padding-bottom: 0;
}

.vfes-ms-content-ilimitada .vfes-flex__direction--colum {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
}

.vfes-ms-content-ilimitada .vfms-link {
  text-decoration: underline;
}

.vfes-ms-content-ilimitada .vfms-img__size {
  height: 5rem;
  width: 5rem;
}

.vfes-ms-content-ilimitada .vfms-button__width {
  min-width: 18.75rem;
}

.vfes-ms-content-ilimitada .vfms-popup {
  position: fixed;
  height: 100vh;
  width: 100%;
  top: 0;
  background: rgba(0, 0, 0, 0.5);
  z-index: 4;
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  -webkit-box-align: center;
          align-items: center;
}

.vfes-ms-content-ilimitada .vfms-container {
  background: #fff;
  padding: 5%;
  position: relative;
}

.vfes-ms-content-ilimitada .vfms-container__legales {
  margin: 5%;
  background: white;
  padding: 5%;
  position: relative;
}

.vfes-ms-content-ilimitada .vfms-popup__legales {
  position: absolute;
  top: 6.25rem;
  background: rgba(0, 0, 0, 0.5);
  z-index: 1;
}

.vfes-ms-content-ilimitada .vfms-icon {
  position: absolute;
  right: 0.625rem;
  top: 0.625rem;
}

.vfes-ms-content-ilimitada .vfes-paragraph--right {
  text-align: right;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfbWljcm8uc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBcXVpIHNlIHB1ZWRlbiBpbXBvcnRhciBsaWJyZXLDrWFzIGV4dGVybmFzXG4vLyBlajogQGltcG9ydCAnL3Rvb2xzL2Z1bmN0aW9ucyc7XG5cbkBpbXBvcnQgXCJtaWNyb1wiOyIsIi8vIENTUyBkZWwgbWljcm9zaXRlXG4udmZlcy1tcy1jb250ZW50LWlsaW1pdGFkYXtcbiAgICAudmZtcy10aXRsZXtcbiAgICAgICAgJl9fY2VudGVyIHtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAudmZtcy1ub21hcmdpbl9fYm90dG9tIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICB9XG4gICAgLnZmbXMtbm9wYWRkaW5nX19ib3R0b20ge1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMDtcbiAgICB9XG4gICAgLnZmZXMtZmxleF9fZGlyZWN0aW9uLS1jb2x1bSB7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgfVxuICAgIC52Zm1zLWxpbmsge1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICB9XG4gICAgLnZmbXMtaW1nX19zaXplIHtcbiAgICAgICAgaGVpZ2h0OiA4MHB4O1xuICAgICAgICB3aWR0aDogODBweDtcbiAgICB9XG4gICAgLnZmbXMtYnV0dG9uX193aWR0aCB7XG4gICAgICAgIG1pbi13aWR0aDogMzAwcHg7XG4gICAgfVxuICAgIC52Zm1zLXBvcHVwIHtcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLC41KTtcbiAgICAgICAgei1pbmRleDogNDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuICAgIC52Zm1zLWNvbnRhaW5lciB7XG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICAgIHBhZGRpbmc6IDUlO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICZfX2xlZ2FsZXMge1xuICAgICAgICAgICAgbWFyZ2luOiA1JTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgICAgICAgcGFkZGluZzogNSU7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLnZmbXMtcG9wdXBfX2xlZ2FsZXMge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMTAwcHg7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsLjUpO1xuICAgICAgICB6LWluZGV4OiAxO1xuICAgIH1cbiAgICAudmZtcy1pY29uIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICByaWdodDogMTBweDtcbiAgICAgICAgdG9wOiAxMHB4O1xuICAgIH1cbiAgICAudmZlcy1wYXJhZ3JhcGgtLXJpZ2h0IHtcbiAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgfVxufSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUNDQSxBQUVRLDBCQUZrQixDQUVqQixtQkFBUSxDQUFDO0VBQ04sVUFBVSxFQUFFLE1BQU07Q0FDckI7O0FBSlQsQUFNSSwwQkFOc0IsQ0FNdEIsc0JBQXNCLENBQUM7RUFDbkIsYUFBYSxFQUFFLENBQUM7Q0FDbkI7O0FBUkwsQUFTSSwwQkFUc0IsQ0FTdEIsdUJBQXVCLENBQUM7RUFDcEIsY0FBYyxFQUFFLENBQUM7Q0FDcEI7O0FBWEwsQUFZSSwwQkFac0IsQ0FZdEIsNEJBQTRCLENBQUM7RUFDekIsY0FBYyxFQUFFLE1BQU07Q0FDekI7O0FBZEwsQUFlSSwwQkFmc0IsQ0FldEIsVUFBVSxDQUFDO0VBQ1AsZUFBZSxFQUFFLFNBQVM7Q0FDN0I7O0FBakJMLEFBa0JJLDBCQWxCc0IsQ0FrQnRCLGVBQWUsQ0FBQztFQUNaLE1BQU0sRUFBRSxJQUFJO0VBQ1osS0FBSyxFQUFFLElBQUk7Q0FDZDs7QUFyQkwsQUFzQkksMEJBdEJzQixDQXNCdEIsbUJBQW1CLENBQUM7RUFDaEIsU0FBUyxFQUFFLEtBQUs7Q0FDbkI7O0FBeEJMLEFBeUJJLDBCQXpCc0IsQ0F5QnRCLFdBQVcsQ0FBQztFQUNSLFFBQVEsRUFBRSxLQUFLO0VBQ2YsTUFBTSxFQUFFLEtBQUs7RUFDYixLQUFLLEVBQUUsSUFBSTtFQUNYLEdBQUcsRUFBRSxDQUFDO0VBQ04sVUFBVSxFQUFFLGtCQUFjO0VBQzFCLE9BQU8sRUFBRSxDQUFDO0VBQ1YsT0FBTyxFQUFFLElBQUk7RUFDYixlQUFlLEVBQUUsTUFBTTtFQUN2QixXQUFXLEVBQUUsTUFBTTtDQUN0Qjs7QUFuQ0wsQUFvQ0ksMEJBcENzQixDQW9DdEIsZUFBZSxDQUFDO0VBQ1osVUFBVSxFQUFFLElBQUk7RUFDaEIsT0FBTyxFQUFFLEVBQUU7RUFDWCxRQUFRLEVBQUUsUUFBUTtDQU9yQjs7QUE5Q0wsQUF3Q1EsMEJBeENrQixDQXdDakIsd0JBQVMsQ0FBQztFQUNQLE1BQU0sRUFBRSxFQUFFO0VBQ1YsVUFBVSxFQUFFLEtBQUs7RUFDakIsT0FBTyxFQUFFLEVBQUU7RUFDWCxRQUFRLEVBQUUsUUFBUTtDQUNyQjs7QUE3Q1QsQUErQ0ksMEJBL0NzQixDQStDdEIsb0JBQW9CLENBQUM7RUFDakIsUUFBUSxFQUFFLFFBQVE7RUFDbEIsR0FBRyxFQUFFLEtBQUs7RUFDVixVQUFVLEVBQUUsa0JBQWM7RUFDMUIsT0FBTyxFQUFFLENBQUM7Q0FDYjs7QUFwREwsQUFxREksMEJBckRzQixDQXFEdEIsVUFBVSxDQUFDO0VBQ1AsUUFBUSxFQUFFLFFBQVE7RUFDbEIsS0FBSyxFQUFFLElBQUk7RUFDWCxHQUFHLEVBQUUsSUFBSTtDQUNaOztBQXpETCxBQTBESSwwQkExRHNCLENBMER0QixzQkFBc0IsQ0FBQztFQUNuQixVQUFVLEVBQUUsS0FBSztDQUNwQiJ9 */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfbWljcm8uc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBcXVpIHNlIHB1ZWRlbiBpbXBvcnRhciBsaWJyZXLDrWFzIGV4dGVybmFzXG4vLyBlajogQGltcG9ydCAnL3Rvb2xzL2Z1bmN0aW9ucyc7XG5cbkBpbXBvcnQgXCJtaWNyb1wiOyIsIi8vIENTUyBkZWwgbWljcm9zaXRlXG4udmZlcy1tcy1jb250ZW50LWlsaW1pdGFkYXtcbiAgICAudmZtcy10aXRsZXtcbiAgICAgICAgJl9fY2VudGVyIHtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAudmZtcy1ub21hcmdpbl9fYm90dG9tIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICB9XG4gICAgLnZmbXMtbm9wYWRkaW5nX19ib3R0b20ge1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMDtcbiAgICB9XG4gICAgLnZmZXMtZmxleF9fZGlyZWN0aW9uLS1jb2x1bSB7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgfVxuICAgIC52Zm1zLWxpbmsge1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICB9XG4gICAgLnZmbXMtaW1nX19zaXplIHtcbiAgICAgICAgaGVpZ2h0OiA4MHB4O1xuICAgICAgICB3aWR0aDogODBweDtcbiAgICB9XG4gICAgLnZmbXMtYnV0dG9uX193aWR0aCB7XG4gICAgICAgIG1pbi13aWR0aDogMzAwcHg7XG4gICAgfVxuICAgIC52Zm1zLXBvcHVwIHtcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLC41KTtcbiAgICAgICAgei1pbmRleDogNDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuICAgIC52Zm1zLWNvbnRhaW5lciB7XG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICAgIHBhZGRpbmc6IDUlO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICZfX2xlZ2FsZXMge1xuICAgICAgICAgICAgbWFyZ2luOiA1JTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgICAgICAgcGFkZGluZzogNSU7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLnZmbXMtcG9wdXBfX2xlZ2FsZXMge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMTAwcHg7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsLjUpO1xuICAgICAgICB6LWluZGV4OiAxO1xuICAgIH1cbiAgICAudmZtcy1pY29uIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICByaWdodDogMTBweDtcbiAgICAgICAgdG9wOiAxMHB4O1xuICAgIH1cbiAgICAudmZlcy1wYXJhZ3JhcGgtLXJpZ2h0IHtcbiAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgfVxufSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUNDQSxBQUVRLDBCQUZrQixDQUVqQixtQkFBUSxDQUFDO0VBQ04sVUFBVSxFQUFFLE1BQU07Q0FDckI7O0FBSlQsQUFNSSwwQkFOc0IsQ0FNdEIsc0JBQXNCLENBQUM7RUFDbkIsYUFBYSxFQUFFLENBQUM7Q0FDbkI7O0FBUkwsQUFTSSwwQkFUc0IsQ0FTdEIsdUJBQXVCLENBQUM7RUFDcEIsY0FBYyxFQUFFLENBQUM7Q0FDcEI7O0FBWEwsQUFZSSwwQkFac0IsQ0FZdEIsNEJBQTRCLENBQUM7RUFDekIsY0FBYyxFQUFFLE1BQU07Q0FDekI7O0FBZEwsQUFlSSwwQkFmc0IsQ0FldEIsVUFBVSxDQUFDO0VBQ1AsZUFBZSxFQUFFLFNBQVM7Q0FDN0I7O0FBakJMLEFBa0JJLDBCQWxCc0IsQ0FrQnRCLGVBQWUsQ0FBQztFQUNaLE1BQU0sRUFBRSxJQUFJO0VBQ1osS0FBSyxFQUFFLElBQUk7Q0FDZDs7QUFyQkwsQUFzQkksMEJBdEJzQixDQXNCdEIsbUJBQW1CLENBQUM7RUFDaEIsU0FBUyxFQUFFLEtBQUs7Q0FDbkI7O0FBeEJMLEFBeUJJLDBCQXpCc0IsQ0F5QnRCLFdBQVcsQ0FBQztFQUNSLFFBQVEsRUFBRSxLQUFLO0VBQ2YsTUFBTSxFQUFFLEtBQUs7RUFDYixLQUFLLEVBQUUsSUFBSTtFQUNYLEdBQUcsRUFBRSxDQUFDO0VBQ04sVUFBVSxFQUFFLGtCQUFjO0VBQzFCLE9BQU8sRUFBRSxDQUFDO0VBQ1YsT0FBTyxFQUFFLElBQUk7RUFDYixlQUFlLEVBQUUsTUFBTTtFQUN2QixXQUFXLEVBQUUsTUFBTTtDQUN0Qjs7QUFuQ0wsQUFvQ0ksMEJBcENzQixDQW9DdEIsZUFBZSxDQUFDO0VBQ1osVUFBVSxFQUFFLElBQUk7RUFDaEIsT0FBTyxFQUFFLEVBQUU7RUFDWCxRQUFRLEVBQUUsUUFBUTtDQU9yQjs7QUE5Q0wsQUF3Q1EsMEJBeENrQixDQXdDakIsd0JBQVMsQ0FBQztFQUNQLE1BQU0sRUFBRSxFQUFFO0VBQ1YsVUFBVSxFQUFFLEtBQUs7RUFDakIsT0FBTyxFQUFFLEVBQUU7RUFDWCxRQUFRLEVBQUUsUUFBUTtDQUNyQjs7QUE3Q1QsQUErQ0ksMEJBL0NzQixDQStDdEIsb0JBQW9CLENBQUM7RUFDakIsUUFBUSxFQUFFLFFBQVE7RUFDbEIsR0FBRyxFQUFFLEtBQUs7RUFDVixVQUFVLEVBQUUsa0JBQWM7RUFDMUIsT0FBTyxFQUFFLENBQUM7Q0FDYjs7QUFwREwsQUFxREksMEJBckRzQixDQXFEdEIsVUFBVSxDQUFDO0VBQ1AsUUFBUSxFQUFFLFFBQVE7RUFDbEIsS0FBSyxFQUFFLElBQUk7RUFDWCxHQUFHLEVBQUUsSUFBSTtDQUNaOztBQXpETCxBQTBESSwwQkExRHNCLENBMER0QixzQkFBc0IsQ0FBQztFQUNuQixVQUFVLEVBQUUsS0FBSztDQUNwQiJ9 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
