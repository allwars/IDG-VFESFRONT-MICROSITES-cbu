/**
 * Vodafone Reboot Framework: Version 15.6.0. Generation Date: 2020-03-02T11:17:40.670Z
 */

.vfes-ms-content-mini .vfms-title__center {
  text-align: center;
}

.vfes-ms-content-mini .vfms-nomargin__bottom {
  margin-bottom: 0;
}

.vfes-ms-content-mini .vfms-nopadding__bottom {
  padding-bottom: 0;
}

.vfes-ms-content-mini .vfes-flex__direction--colum {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
}

.vfes-ms-content-mini .vfms-link {
  text-decoration: underline;
}

.vfes-ms-content-mini .vfms-img__size {
  height: 5rem;
  width: 5rem;
}

.vfes-ms-content-mini .vfms-button__width {
  min-width: 18.75rem;
}

.vfes-ms-content-mini .vfms-popup {
  position: fixed;
  height: 100vh;
  width: 100%;
  top: 0;
  background: rgba(0, 0, 0, 0.5);
  z-index: 4;
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center;
  -webkit-box-align: center;
          align-items: center;
}

.vfes-ms-content-mini .vfms-container {
  background: #fff;
  padding: 5%;
  position: relative;
}

.vfes-ms-content-mini .vfms-container__legales {
  margin: 5%;
  background: white;
  padding: 2% 5% 5% 5%;
  position: relative;
}

.vfes-ms-content-mini .vfms-popup__legales {
  position: absolute;
  top: 6.25rem;
  background: rgba(0, 0, 0, 0.5);
  z-index: 1;
}

.vfes-ms-content-mini .vfms-icon {
  position: absolute;
  right: 0.625rem;
  top: 0.625rem;
}

.vfes-ms-content-mini .vfes-paragraph--right {
  text-align: right;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfbWljcm8uc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBcXVpIHNlIHB1ZWRlbiBpbXBvcnRhciBsaWJyZXLDrWFzIGV4dGVybmFzXG4vLyBlajogQGltcG9ydCAnL3Rvb2xzL2Z1bmN0aW9ucyc7XG5cbkBpbXBvcnQgXCJtaWNyb1wiOyIsIi8vIENTUyBkZWwgbWljcm9zaXRlXG4udmZlcy1tcy1jb250ZW50LW1pbml7XG4gICAgLnZmbXMtdGl0bGV7XG4gICAgICAgICZfX2NlbnRlciB7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLnZmbXMtbm9tYXJnaW5fX2JvdHRvbSB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgfVxuICAgIC52Zm1zLW5vcGFkZGluZ19fYm90dG9tIHtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDA7XG4gICAgfVxuICAgIC52ZmVzLWZsZXhfX2RpcmVjdGlvbi0tY29sdW0ge1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIH1cbiAgICAudmZtcy1saW5rIHtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgfVxuICAgIC52Zm1zLWltZ19fc2l6ZSB7XG4gICAgICAgIGhlaWdodDogODBweDtcbiAgICAgICAgd2lkdGg6IDgwcHg7XG4gICAgfVxuICAgIC52Zm1zLWJ1dHRvbl9fd2lkdGgge1xuICAgICAgICBtaW4td2lkdGg6IDMwMHB4O1xuICAgIH1cbiAgICAudmZtcy1wb3B1cCB7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLDAsMCwuNSk7XG4gICAgICAgIHotaW5kZXg6IDQ7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICAudmZtcy1jb250YWluZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgICBwYWRkaW5nOiA1JTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAmX19sZWdhbGVzIHtcbiAgICAgICAgICAgIG1hcmdpbjogNSU7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDIlIDUlIDUlIDUlO1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC52Zm1zLXBvcHVwX19sZWdhbGVzIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDEwMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLC41KTtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICB9XG4gICAgLnZmbXMtaWNvbiB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgcmlnaHQ6IDEwcHg7XG4gICAgICAgIHRvcDogMTBweDtcbiAgICB9XG4gICAgLnZmZXMtcGFyYWdyYXBoLS1yaWdodCB7XG4gICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIH1cbn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFDQ0EsQUFFUSxxQkFGYSxDQUVaLG1CQUFRLENBQUM7RUFDTixVQUFVLEVBQUUsTUFBTTtDQUNyQjs7QUFKVCxBQU1JLHFCQU5pQixDQU1qQixzQkFBc0IsQ0FBQztFQUNuQixhQUFhLEVBQUUsQ0FBQztDQUNuQjs7QUFSTCxBQVNJLHFCQVRpQixDQVNqQix1QkFBdUIsQ0FBQztFQUNwQixjQUFjLEVBQUUsQ0FBQztDQUNwQjs7QUFYTCxBQVlJLHFCQVppQixDQVlqQiw0QkFBNEIsQ0FBQztFQUN6QixjQUFjLEVBQUUsTUFBTTtDQUN6Qjs7QUFkTCxBQWVJLHFCQWZpQixDQWVqQixVQUFVLENBQUM7RUFDUCxlQUFlLEVBQUUsU0FBUztDQUM3Qjs7QUFqQkwsQUFrQkkscUJBbEJpQixDQWtCakIsZUFBZSxDQUFDO0VBQ1osTUFBTSxFQUFFLElBQUk7RUFDWixLQUFLLEVBQUUsSUFBSTtDQUNkOztBQXJCTCxBQXNCSSxxQkF0QmlCLENBc0JqQixtQkFBbUIsQ0FBQztFQUNoQixTQUFTLEVBQUUsS0FBSztDQUNuQjs7QUF4QkwsQUF5QkkscUJBekJpQixDQXlCakIsV0FBVyxDQUFDO0VBQ1IsUUFBUSxFQUFFLEtBQUs7RUFDZixNQUFNLEVBQUUsS0FBSztFQUNiLEtBQUssRUFBRSxJQUFJO0VBQ1gsR0FBRyxFQUFFLENBQUM7RUFDTixVQUFVLEVBQUUsa0JBQWM7RUFDMUIsT0FBTyxFQUFFLENBQUM7RUFDVixPQUFPLEVBQUUsSUFBSTtFQUNiLGVBQWUsRUFBRSxNQUFNO0VBQ3ZCLFdBQVcsRUFBRSxNQUFNO0NBQ3RCOztBQW5DTCxBQW9DSSxxQkFwQ2lCLENBb0NqQixlQUFlLENBQUM7RUFDWixVQUFVLEVBQUUsSUFBSTtFQUNoQixPQUFPLEVBQUUsRUFBRTtFQUNYLFFBQVEsRUFBRSxRQUFRO0NBT3JCOztBQTlDTCxBQXdDUSxxQkF4Q2EsQ0F3Q1osd0JBQVMsQ0FBQztFQUNQLE1BQU0sRUFBRSxFQUFFO0VBQ1YsVUFBVSxFQUFFLEtBQUs7RUFDakIsT0FBTyxFQUFFLFdBQVc7RUFDcEIsUUFBUSxFQUFFLFFBQVE7Q0FDckI7O0FBN0NULEFBK0NJLHFCQS9DaUIsQ0ErQ2pCLG9CQUFvQixDQUFDO0VBQ2pCLFFBQVEsRUFBRSxRQUFRO0VBQ2xCLEdBQUcsRUFBRSxLQUFLO0VBQ1YsVUFBVSxFQUFFLGtCQUFjO0VBQzFCLE9BQU8sRUFBRSxDQUFDO0NBQ2I7O0FBcERMLEFBcURJLHFCQXJEaUIsQ0FxRGpCLFVBQVUsQ0FBQztFQUNQLFFBQVEsRUFBRSxRQUFRO0VBQ2xCLEtBQUssRUFBRSxJQUFJO0VBQ1gsR0FBRyxFQUFFLElBQUk7Q0FDWjs7QUF6REwsQUEwREkscUJBMURpQixDQTBEakIsc0JBQXNCLENBQUM7RUFDbkIsVUFBVSxFQUFFLEtBQUs7Q0FDcEIifQ== */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfbWljcm8uc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBcXVpIHNlIHB1ZWRlbiBpbXBvcnRhciBsaWJyZXLDrWFzIGV4dGVybmFzXG4vLyBlajogQGltcG9ydCAnL3Rvb2xzL2Z1bmN0aW9ucyc7XG5cbkBpbXBvcnQgXCJtaWNyb1wiOyIsIi8vIENTUyBkZWwgbWljcm9zaXRlXG4udmZlcy1tcy1jb250ZW50LW1pbml7XG4gICAgLnZmbXMtdGl0bGV7XG4gICAgICAgICZfX2NlbnRlciB7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLnZmbXMtbm9tYXJnaW5fX2JvdHRvbSB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgfVxuICAgIC52Zm1zLW5vcGFkZGluZ19fYm90dG9tIHtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDA7XG4gICAgfVxuICAgIC52ZmVzLWZsZXhfX2RpcmVjdGlvbi0tY29sdW0ge1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIH1cbiAgICAudmZtcy1saW5rIHtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgfVxuICAgIC52Zm1zLWltZ19fc2l6ZSB7XG4gICAgICAgIGhlaWdodDogODBweDtcbiAgICAgICAgd2lkdGg6IDgwcHg7XG4gICAgfVxuICAgIC52Zm1zLWJ1dHRvbl9fd2lkdGgge1xuICAgICAgICBtaW4td2lkdGg6IDMwMHB4O1xuICAgIH1cbiAgICAudmZtcy1wb3B1cCB7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLDAsMCwuNSk7XG4gICAgICAgIHotaW5kZXg6IDQ7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICAudmZtcy1jb250YWluZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgICBwYWRkaW5nOiA1JTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAmX19sZWdhbGVzIHtcbiAgICAgICAgICAgIG1hcmdpbjogNSU7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgICAgICAgIHBhZGRpbmc6IDIlIDUlIDUlIDUlO1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC52Zm1zLXBvcHVwX19sZWdhbGVzIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDEwMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLC41KTtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICB9XG4gICAgLnZmbXMtaWNvbiB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgcmlnaHQ6IDEwcHg7XG4gICAgICAgIHRvcDogMTBweDtcbiAgICB9XG4gICAgLnZmZXMtcGFyYWdyYXBoLS1yaWdodCB7XG4gICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIH1cbn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFDQ0EsQUFFUSxxQkFGYSxDQUVaLG1CQUFRLENBQUM7RUFDTixVQUFVLEVBQUUsTUFBTTtDQUNyQjs7QUFKVCxBQU1JLHFCQU5pQixDQU1qQixzQkFBc0IsQ0FBQztFQUNuQixhQUFhLEVBQUUsQ0FBQztDQUNuQjs7QUFSTCxBQVNJLHFCQVRpQixDQVNqQix1QkFBdUIsQ0FBQztFQUNwQixjQUFjLEVBQUUsQ0FBQztDQUNwQjs7QUFYTCxBQVlJLHFCQVppQixDQVlqQiw0QkFBNEIsQ0FBQztFQUN6QixjQUFjLEVBQUUsTUFBTTtDQUN6Qjs7QUFkTCxBQWVJLHFCQWZpQixDQWVqQixVQUFVLENBQUM7RUFDUCxlQUFlLEVBQUUsU0FBUztDQUM3Qjs7QUFqQkwsQUFrQkkscUJBbEJpQixDQWtCakIsZUFBZSxDQUFDO0VBQ1osTUFBTSxFQUFFLElBQUk7RUFDWixLQUFLLEVBQUUsSUFBSTtDQUNkOztBQXJCTCxBQXNCSSxxQkF0QmlCLENBc0JqQixtQkFBbUIsQ0FBQztFQUNoQixTQUFTLEVBQUUsS0FBSztDQUNuQjs7QUF4QkwsQUF5QkkscUJBekJpQixDQXlCakIsV0FBVyxDQUFDO0VBQ1IsUUFBUSxFQUFFLEtBQUs7RUFDZixNQUFNLEVBQUUsS0FBSztFQUNiLEtBQUssRUFBRSxJQUFJO0VBQ1gsR0FBRyxFQUFFLENBQUM7RUFDTixVQUFVLEVBQUUsa0JBQWM7RUFDMUIsT0FBTyxFQUFFLENBQUM7RUFDVixPQUFPLEVBQUUsSUFBSTtFQUNiLGVBQWUsRUFBRSxNQUFNO0VBQ3ZCLFdBQVcsRUFBRSxNQUFNO0NBQ3RCOztBQW5DTCxBQW9DSSxxQkFwQ2lCLENBb0NqQixlQUFlLENBQUM7RUFDWixVQUFVLEVBQUUsSUFBSTtFQUNoQixPQUFPLEVBQUUsRUFBRTtFQUNYLFFBQVEsRUFBRSxRQUFRO0NBT3JCOztBQTlDTCxBQXdDUSxxQkF4Q2EsQ0F3Q1osd0JBQVMsQ0FBQztFQUNQLE1BQU0sRUFBRSxFQUFFO0VBQ1YsVUFBVSxFQUFFLEtBQUs7RUFDakIsT0FBTyxFQUFFLFdBQVc7RUFDcEIsUUFBUSxFQUFFLFFBQVE7Q0FDckI7O0FBN0NULEFBK0NJLHFCQS9DaUIsQ0ErQ2pCLG9CQUFvQixDQUFDO0VBQ2pCLFFBQVEsRUFBRSxRQUFRO0VBQ2xCLEdBQUcsRUFBRSxLQUFLO0VBQ1YsVUFBVSxFQUFFLGtCQUFjO0VBQzFCLE9BQU8sRUFBRSxDQUFDO0NBQ2I7O0FBcERMLEFBcURJLHFCQXJEaUIsQ0FxRGpCLFVBQVUsQ0FBQztFQUNQLFFBQVEsRUFBRSxRQUFRO0VBQ2xCLEtBQUssRUFBRSxJQUFJO0VBQ1gsR0FBRyxFQUFFLElBQUk7Q0FDWjs7QUF6REwsQUEwREkscUJBMURpQixDQTBEakIsc0JBQXNCLENBQUM7RUFDbkIsVUFBVSxFQUFFLEtBQUs7Q0FDcEIifQ== */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
