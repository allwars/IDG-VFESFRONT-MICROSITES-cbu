/**
 * Vodafone Reboot Framework: Version 15.5.0. Generation Date: 2020-01-09T12:09:15.233Z
 */

.vfes-ms-content .vfes-counter {
  background-image:  url('../img/fondo-mobile.png?v=a25190b6423b86d7c4094d261d869fbd');
  background-size: cover;
  background-repeat: no-repeat;
}

.vfes-ms-content .vfes-counter--img {
  max-width: 13.75rem;
  position: relative;
  margin: 0 auto;
  display: block;
  padding: 1.875rem 0;
}

@media (min-width: 40rem) {
  .vfes-ms-content .vfes-counter {
    background-image:  url('../img/fondo-desktop.png?v=b02340970656a715487e007efa0443b4');
  }
  .vfes-ms-content .vfes-counter--flex {
    display: -webkit-box;
    display: flex;
    -webkit-box-align: center;
            align-items: center;
    -webkit-box-pack: center;
            justify-content: center;
  }
  .vfes-ms-content .vfes-counter--img {
    width: 26.25rem;
    max-width: inherit;
    padding-right: 3.125rem;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
